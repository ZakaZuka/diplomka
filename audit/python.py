import subprocess
import json
import sys
from pathlib import Path
from deep_translator import GoogleTranslator
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = "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"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á

# –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
CHECK_TRANSLATIONS = {
    'reentrancy-eth': '–£—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (ETH‚Äë–ø–µ—Ä–µ–≤–æ–¥)',
    'reentrancy-no-eth': '–£—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–±–µ–∑ ETH‚Äë–ø–µ—Ä–µ–≤–æ–¥–∞)',
    'unchecked-transfer': '–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥',
    'incorrect-equality': '–û–ø–∞—Å–Ω–æ–µ —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ',
    'weak-prng': '–°–ª–∞–±—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª',
    'timestamp': '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤—Ä–µ–º–µ–Ω–∏',
    'suicidal': '–°–∞–º–æ—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
    'delegatecall-loop': '–û–ø–∞—Å–Ω—ã–π delegatecall',
    'uninitialized-state': '–ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
}

IMPACT_TRANSLATIONS = {
    'high': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
    'medium': '—Å—Ä–µ–¥–Ω–∏–π',
    'low': '–Ω–∏–∑–∫–∏–π',
    'informational': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'
}

def translate_with_gpt(text):
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫."},
                {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n\n{text}"}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ GPT: {e}")
        return text

def analyze_contract(contract_path):
    contract = Path(contract_path)
    if not contract.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {contract_path}")
        sys.exit(1)

    report_json = contract.with_suffix('.slither.json')

    proc = subprocess.run(
        ['slither', str(contract), '--json', str(report_json)],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )

    if proc.returncode != 0:
        print("‚ö†Ô∏è Slither –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º", proc.returncode)
        output = proc.stderr.strip() or proc.stdout.strip()
        translated_output = translate_with_gpt(output)
        print(translated_output)
        print("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–∑–±–æ—Ä JSON‚Äë–æ—Ç—á—ë—Ç–∞‚Ä¶")

    try:
        with open(report_json, encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç—á—ë—Ç {report_json}")
        sys.exit(1)

    if 'detectors' not in data:
        print("‚ùå –ö–ª—é—á 'detectors' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON.")
        print(json.dumps(data, ensure_ascii=False, indent=2))
        sys.exit(1)

    issues = []
    for det in data.get('detectors', []):
        issues.append({
            'check': det.get('check', '').strip(),
            'impact': det.get('impact', '').strip(),
            'description': det.get('description', '').strip(),
            'elements': [e.get('name') for e in det.get('elements', [])],
            'location': det.get('source_mapping', '').strip(),
        })
    return issues, report_json

def print_report(issues, report_json):
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç Slither: {report_json}")
    if not issues:
        print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
        return

    print(f"\nüîé –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:\n" + "="*60)
    for i in issues:
        raw_check = i['check']
        rus_check = CHECK_TRANSLATIONS.get(raw_check.lower(), raw_check)
        rus_impact = IMPACT_TRANSLATIONS.get(i['impact'].lower(), i['impact'])

        print(f"‚ö†Ô∏è {rus_check} ‚Äî —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {rus_impact}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {i['description']}")
        if i['elements']:
            print(f"–ó–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(i['elements'])}")
        print(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {i['location']}")
        print("-" * 60)

def save_simple_json(issues, out_path):
    with open(out_path, 'w', encoding='utf-8') as f:
        json.dump(issues, f, ensure_ascii=False, indent=2)
    print(f"\nüíæ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π JSON‚Äë–æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}")

if __name__ == '__main__':
    if len(sys.argv) == 1:
        contract_path = 'soll.sol'
        print("‚ÑπÔ∏è  –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'soll.sol'")
    else:
        contract_path = sys.argv[1]

    issues, full_report = analyze_contract(contract_path)
    print_report(issues, full_report)
    save_simple_json(issues, Path(contract_path).with_name('simple_report.json'))
