import shutil
import subprocess
from pathlib import Path
import openai
import google.generativeai as genai


class ERC20AuditTool:
    def __init__(self, contract_path, openai_api_key):
        self.contract_path = Path(contract_path)
        #self.slither = Slither(str(self.contract_path))
        genai.configure(api_key=openai_api_key)

    def run_slither_json(self):
        if not shutil.which("slither"):
            return "‚ùå Slither –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"

        proc = subprocess.run(
            ['slither', str(self.contract_path)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        return proc.stderr.strip() or proc.stdout.strip()

    def analyze_with_ai(self):
        model = genai.GenerativeModel("gemini-1.5-flash")
        prompt = f"""
        –î–∞–Ω –æ—Ç—á–µ—Ç  slither-analyzer, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, —É–±–µ—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –µ—Å—Ç—å
        C:USERS –ò solc --version:
        {self.run_slither_json()}
        """
        response = model.generate_content(prompt)
        return response.text

    def analyze(self):
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {self.contract_path.name}")

        # –ó–∞–ø—É—Å–∫ slither
        slither_output = self.run_slither_json()

        # AI-–∞–Ω–∞–ª–∏–∑
        ai_analysis = self.analyze_with_ai()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        result_text = f"""
            === üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é Slither –∏ AI===
            {ai_analysis}
            """
        return result_text.strip()
    
if __name__ == "__main__":
    tool = ERC20AuditTool("soll.sol", 
                          openai_api_key="AIzaSyA1Y8Ii4Hsfl71q4bfQq5IshxTYHjkxiZA")
    result = tool.analyze()

    print("\n=== üìã AI-–∞–Ω–∞–ª–∏–∑ ===")
    print(result['ai_analysis'])

    print("\n=== üõ°Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ===")
    for issue in result['slither_issues']:
        print(f"‚ö†Ô∏è {issue['check']} ({issue['impact']}) ‚Äî {issue['description']}")