import subprocess
import json
from pathlib import Path
import openai
from slither import Slither
import shutil

CHECK_TRANSLATIONS = {
    'reentrancy-eth': '–£—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (ETH‚Äë–ø–µ—Ä–µ–≤–æ–¥)',
    'reentrancy-no-eth': '–£—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–±–µ–∑ ETH‚Äë–ø–µ—Ä–µ–≤–æ–¥–∞)',
    'unchecked-transfer': '–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥',
    'incorrect-equality': '–û–ø–∞—Å–Ω–æ–µ —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ',
    'weak-prng': '–°–ª–∞–±—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª',
    'timestamp': '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤—Ä–µ–º–µ–Ω–∏',
    'suicidal': '–°–∞–º–æ—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
    'delegatecall-loop': '–û–ø–∞—Å–Ω—ã–π delegatecall',
    'uninitialized-state': '–ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
}

IMPACT_TRANSLATIONS = {
    'high': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
    'medium': '—Å—Ä–µ–¥–Ω–∏–π',
    'low': '–Ω–∏–∑–∫–∏–π',
    'informational': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'
}

class ERC20AuditTool:
    def __init__(self, contract_path, openai_api_key):
        self.contract_path = Path(contract_path)
        #self.slither = Slither(str(self.contract_path))
        openai.api_key = openai_api_key

    def translate_with_gpt(self, text):
        try:
            response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫."},
                    {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n\n{text}"}
                ]
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ GPT: {e}")
            return text

    def analyze_with_ai(self, code_snippet):
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Solidity –∏ –Ω–∞–π–¥–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

        {code_snippet}

        –ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –æ–±—ä—è—Å–Ω–∏ –∏—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.5
        )
        return response.choices[0].message.content.strip()

    def run_slither_json(self):
        json_path = self.contract_path.with_suffix('.slither.json')

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        if json_path.exists():
            json_path.unlink()

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ slither –¥–æ—Å—Ç—É–ø–µ–Ω
        if not shutil.which("slither"):
            print("‚ùå Slither –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return None

        # –í—ã–ø–æ–ª–Ω–∏–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ subprocess
        proc = subprocess.run(
            ['slither', str(self.contract_path), '--json', str(json_path)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if proc.returncode != 0:
            print("‚ö†Ô∏è Slither –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            error_output = proc.stderr.strip() or proc.stdout.strip()
            print(self.translate_with_gpt(error_output))
            return None

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ JSON –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if not json_path.exists():
            print("‚ùå Slither –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª JSON. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.")
            return None

        return json_path

    def parse_slither_issues(self, json_path):
        try:
            with open(json_path, encoding='utf-8') as f:
                data = json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç—á—ë—Ç: {json_path}")
            return []

        issues = []
        for det in data.get('detectors', []):
            issues.append({
                'check': CHECK_TRANSLATIONS.get(det.get('check', '').lower(), det.get('check')),
                'impact': IMPACT_TRANSLATIONS.get(det.get('impact', '').lower(), det.get('impact')),
                'description': det.get('description', '').strip(),
                'elements': [e.get('name') for e in det.get('elements', [])],
                'location': det.get('source_mapping', '').strip(),
            })

        
    
        return issues

    def save_simple_report(self, issues, path):
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(issues, f, ensure_ascii=False, indent=2)
        print(f"üíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")

    def analyze(self):
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {self.contract_path.name}")

        # AI-–∞–Ω–∞–ª–∏–∑
        code = self.contract_path.read_text(encoding='utf-8')
        ai_analysis = self.analyze_with_ai(code)

        json_path = self.run_slither_json()
        issues = []
        if json_path:
            issues = self.parse_slither_issues(json_path)
            self.save_simple_report(issues, self.contract_path.with_name('simple_report.json'))
        else:
            print("‚ùå Slither –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª JSON. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.")

        if not issues:
            print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Slither'–æ–º.")
            return {
                'ai_analysis': ai_analysis,
                'slither_issues': [],
                'json_path': str(json_path) if json_path else "‚Äî"
            }

        return {
            'ai_analysis': ai_analysis,
            'slither_issues': issues,
            'json_path': str(json_path)
        }
    
if __name__ == "__main__":
    tool = ERC20AuditTool("contracts/MyERC20.sol", openai_api_key="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")
    result = tool.analyze()

    print("\n=== üìã AI-–∞–Ω–∞–ª–∏–∑ ===")
    print(result['ai_analysis'])

    print("\n=== üõ°Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ===")
    for issue in result['slither_issues']:
        print(f"‚ö†Ô∏è {issue['check']} ({issue['impact']}) ‚Äî {issue['description']}")